openapi: "3.0.2"
info:
  title: "REST API Gateway"
  description: "REST API Gateway Documentation"
  version: "1.0.0"
servers:
  - url: "http://localhost:3000"
    description: "Local Server"
paths:
  /orgs:
    get:
      tags:
        - "organizations"
      summary: "Query or search organizations"
      description: "Retrieves a collection of organizations"
      operationId: "findOrganizations"
      parameters:
        - name: "q"
          in: "query"
          description: "The parameter to filter the query results using the name of the organization"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "acme"
        - name: "select"
          in: "query"
          description: "The parameter to control the projection of query results. Can be a comma delimited set of model attributes"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "id,name"
        - name: "orderBy"
          in: "query"
          description: "The parameter to control the sorting for the query results. Can be a comma delimited set of model attributes. Default sort order is ascending. Use the minus (-) sign before the field to change sort order"
          schema:
            type: "string"
            nullable: true
          example: "name,-createdAt"
        - name: "page"
          in: "query"
          description: "The pagination parameter to control the page number"
          schema:
            type: "integer"
            default: 1
            nullable: true
        - name: "limit"
          in: "query"
          description: "The pagination parameter to control the number of returned records per page"
          schema:
            type: "integer"
            default: 25
            nullable: true
      responses:
        200:
          description: "Successfully queried resources"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OrganizationQueryResponse"
              example:
                totalRecords: 2
                totalPages: 1
                page: 1
                limit: 25
                data:
                  - id: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
                    name: "acme"
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 2
                  - id: "6696c3fa-ff8a-4b23-9997-27b434352d32"
                    name: "acme2"
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 9
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/InvalidCredentialsError"
        403:
          $ref: "#/components/responses/NotAuthorizedError"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - bearerAuth: []
  /orgs/{name}/comments:
    get:
      tags:
        - "organizations"
      summary: "Query or search comments associated to an organization"
      description: "Retrieves a collection of comments associated to an organization"
      operationId: "findOrganizationComments"
      parameters:
        - name: "name"
          in: "path"
          description: "The name of the organization"
          required: true
          schema:
            type: "string"
            default: ""
        - name: "q"
          in: "query"
          description: "The parameter to filter the query results using the contents of a comment"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "Lorem Ipsum"
        - name: "select"
          in: "query"
          description: "The parameter to control the projection of query results. Can be a comma delimited set of model attributes"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "id,comment"
        - name: "orderBy"
          in: "query"
          description: "The parameter to control the sorting for the query results. Can be a comma delimited set of model attributes. Default sort order is ascending. Use the minus (-) sign before the field to change sort order"
          schema:
            type: "string"
            nullable: true
          example: "organization,-createdAt"
        - name: "page"
          in: "query"
          description: "The pagination parameter to control the page number"
          schema:
            type: "integer"
            default: 1
            nullable: true
        - name: "limit"
          in: "query"
          description: "The pagination parameter to control the number of returned records per page"
          schema:
            type: "integer"
            default: 25
            nullable: true
      responses:
        200:
          description: "Successfully queried resources"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/CommentQueryResponse"
              example:
                totalRecords: 2
                totalPages: 1
                page: 1
                limit: 25
                data:
                  - id: "a64b3121-8d27-43f9-9138-2e4121972720"
                    organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
                    comment: "Nulla condimentum ornare nisi auctor euismod. Phasellus vel tincidunt lectus. Nulla porttitor consequat augue, ut molestie mauris ultricies vel."
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 2
                  - id: "9607a6a4-db32-4f6e-b600-78f6b7f67799"
                    organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
                    comment: "Interdum et malesuada fames ac ante ipsum primis in faucibus. Phasellus molestie, arcu in rutrum euismod, leo justo aliquam ante, molestie gravida odio quam nec urna."
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 8
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/InvalidCredentialsError"
        403:
          $ref: "#/components/responses/NotAuthorizedError"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - bearerAuth: []
    post:
      tags:
        - "organizations"
      summary: "Post a new comment for an organization"
      description: "Post a new comment for an organization"
      operationId: "createOrganizationComment"
      parameters:
        - name: "name"
          in: "path"
          description: "The name of the organization"
          required: true
          schema:
            type: "string"
            default: ""
          example: "acme"
      requestBody:
        description: "New comment to create"
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "comment"
              properties:
                comment:
                  type: "string"
                  description: "The comment text"
            example:
              comment: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas gravida velit nec semper congue. Etiam in orci nec lorem laoreet sodales id eget magna."
      responses:
        201:
          description: "Successfully created comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/InvalidCredentialsError"
        403:
          $ref: "#/components/responses/NotAuthorizedError"
        409:
          $ref: "#/components/responses/ConflictError"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - bearerAuth: []
    delete:
      tags:
        - "organizations"
      summary: "Soft deletes all comments associated to an organization"
      description: "Soft deletes all comments associated to an organization"
      operationId: "deleteOrganizationComments"
      parameters:
        - name: "name"
          in: "path"
          description: "The name of the organization"
          required: true
          schema:
            type: "string"
            default: ""
          example: "acme"
      responses:
        200:
          $ref: "#/components/responses/DeleteResponse"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/InvalidCredentialsError"
        403:
          $ref: "#/components/responses/NotAuthorizedError"
        404:
          $ref: "#/components/responses/ResourceNotFoundError"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - bearerAuth: []
  /orgs/{name}/members:
    get:
      tags:
        - "organizations"
      summary: "Query or search the members of the organization"
      description: "Query or search the members of the organization"
      operationId: "findOrganizationMembers"
      parameters:
        - name: "name"
          in: "path"
          description: "The name of the organization"
          required: true
          schema:
            type: "string"
            default: ""
          example: "acme"
        - name: "q"
          in: "query"
          description: "The parameter to filter the query results using the member's name"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "user1"
        - name: "select"
          in: "query"
          description: "The parameter to control the projection of query results. Can be a comma delimited set of model attributes"
          schema:
            type: "string"
            default: ""
            nullable: true
          example: "id,loginId"
        - name: "orderBy"
          in: "query"
          description: "The parameter to control the sorting for the query results. Can be a comma delimited set of model attributes. Default sort order is ascending. Use the minus (-) sign before the field to change sort order"
          schema:
            type: "string"
            nullable: true
          example: "-followers"
        - name: "page"
          in: "query"
          description: "The pagination parameter to control the page number"
          schema:
            type: "integer"
            default: 1
            nullable: true
        - name: "limit"
          in: "query"
          description: "The pagination parameter to control the number of returned records per page"
          schema:
            type: "integer"
            default: 25
            nullable: true
      responses:
        200:
          description: "Successfully queried members"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/UserQueryResponse"
              example:
                totalRecords: 2
                totalPages: 1
                page: 1
                limit: 25
                data:
                  - id: "331fe8f5-7c1c-48d2-8890-b1df8a1853a1"
                    organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
                    loginId: "user1"
                    avatar: "https://gravatar.com/avatar/d044a58b427b7d3845dc59e131634a91"
                    followers: 2
                    following: 5
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 2
                  - id: "1129438e-0d15-42eb-a7e8-1b7c1ed258c0"
                    organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
                    loginId: "user1"
                    avatar: "https://gravatar.com/avatar/3d8fd0ddb69827ce84ff637889ff7cd0"
                    followers: 6
                    following: 38
                    createdAt: "2019-08-05T10:02:18.047Z"
                    updatedAt: "2020-01-05T15:22:03.020Z"
                    version: 7
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/InvalidCredentialsError"
        403:
          $ref: "#/components/responses/NotAuthorizedError"
        500:
          $ref: "#/components/responses/InternalError"
      security:
        - bearerAuth: []
components:
  schemas:
    User:
      type: "object"
      description: "User model"
      properties:
        id:
          description: "The identifier for the user record"
          type: "string"
          format: "uuid"
          readOnly: true
        organization:
          description: "Ref: Organization. The organization the user is associated with."
          type: "string"
          format: "uuid"
        loginId:
          description: "The login id of the user"
          type: "string"
        avatar:
          description: "The avatar url of the user"
          type: "string"
          format: "uri"
        followers:
          description: "The number of followers of the user."
          type: "integer"
          format: "int32"
          default: 0
        following:
          description: "The number of people being followed by the user."
          type: "integer"
          format: "int32"
          default: 0
        createdAt:
          description: "The timestamp for when the record has been created. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        updatedAt:
          description: "The timestamp for when the record has been last updated. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        version:
          description: "The record's version in the database."
          type: "integer"
          format: "int32"
          readOnly: true
      example:
        id: "331fe8f5-7c1c-48d2-8890-b1df8a1853a1"
        organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
        loginId: "user1"
        avatar: "https://gravatar.com/avatar/d044a58b427b7d3845dc59e131634a91"
        followers: 2
        following: 5
        createdAt: "2019-08-05T10:02:18.047Z"
        updatedAt: "2020-01-05T15:22:03.020Z"
        version: 2
    Comment:
      type: "object"
      description: "Comment model"
      required:
        - "comment"
      properties:
        id:
          description: "The identifier for the comment record"
          type: "string"
          format: "uuid"
          readOnly: true
        organization:
          description: "Ref: Organization. The organization the comment is associated with."
          type: "string"
          format: "uuid"
        comment:
          description: "The comment text"
          type: "string"
        createdAt:
          description: "The timestamp for when the record has been created. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        updatedAt:
          description: "The timestamp for when the record has been last updated. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        version:
          description: "The record's version in the database."
          type: "integer"
          format: "int32"
          readOnly: true
      example:
        id: "74d0f515-6b4d-4112-9439-ed10752d0bc9"
        organization: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
        comment: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vel consequat ipsum, et posuere lorem."
        createdAt: "2019-08-05T10:02:18.047Z"
        updatedAt: "2020-01-05T15:22:03.020Z"
        version: 2
    Organization:
      type: "object"
      description: "Organization model"
      properties:
        id:
          description: "The identifier for the organization record"
          type: "string"
          format: "uuid"
          readOnly: true
        name:
          description: "The name of the organization"
          type: "string"
        createdAt:
          description: "The timestamp for when the record has been created. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        updatedAt:
          description: "The timestamp for when the record has been last updated. For auditing purposes only"
          type: "string"
          format: "date-time"
          readOnly: true
        version:
          description: "The record's version in the database."
          type: "integer"
          format: "int32"
          readOnly: true
      example:
        id: "7fe5b86f-b30d-40ee-9b8b-8619edf0fb18"
        name: "acme"
        createdAt: "2019-08-05T10:02:18.047Z"
        updatedAt: "2020-01-05T15:22:03.020Z"
        version: 2
  responses:
    UserQueryResponse:
      description: "Successfully queried user"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/responses/QueryResponse"
            - type: "object"
              properties:
                data:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/User"
    CommentQueryResponse:
      description: "Successfully queried comments"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/responses/QueryResponse"
            - type: "object"
              properties:
                data:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Comment"
    OrganizationQueryResponse:
      description: "Successfully queried organizations"
      content:
        application/json:
          schema:
            allOf:
            - $ref: "#/components/responses/QueryResponse"
            - type: "object"
              properties:
                data:
                  type: "array"
                  items:
                    $ref: "#/components/schemas/Organization"
    QueryResponse:
      description: "Successfully queried resources"
      content:
        application/json:
          schema:
            type: "object"
            description: "Generic response schema for queries or search"
            properties:
              totalRecords:
                description: "The total number of records or records returned by the query"
                type: "integer"
                default: 0
                readOnly: true
              totalPages:
                description: "The total number of pages returned by the query"
                type: "integer"
                default: 0
                readOnly: true
              page:
                description: "The current page when navigating the query results"
                type: "integer"
                default: 1
                readOnly: true
              limit:
                description: "The limit, size or number of records returned per page by the query"
                type: "integer"
                default: 25
                readOnly: true
              data:
                  type: "array"
                  items:
                    default: []
    GenericResponse:
      description: "Generic response"
      content:
        application/json:
          schema:
            type: "object"
            description: "Generic response message"
            required:
              - "message"
            properties:
              message:
                description: "A descriptive message for the response"
                type: "string"
          example:
            message: "Generic message"
    DeleteResponse:
      description: "Successfully deleted resource/s"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              count:
                description: "The number of records deleted from the database"
                type: "integer"
                format: "int32"
          example:
            count: 8
    ErrorResponse:
      description: "Error response"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                description: "The error or response code"
                type: "integer"
                format: "int32"
                readOnly: true
              type:
                description: "The error name or type"
                type: "string"
                readOnly: true
              message:
                description: "A high level descriptive message for the error"
                type: "string"
                readOnly: true
              data:
                description: "Detailed description of the errors in the request"
                type: "array"
                readOnly: true
                items:
                  type: "object"
                  properties:
                    type:
                      description: "The error name or type"
                      type: "string"
                      default: ""
                    field:
                      description: "The name of the field with the error"
                      type: "string"
                      default: ""
                    message:
                      description: "The detailed error message"
                      type: "string"
                      default: ""
          example:
            code: 404
            type: "NOT_FOUND"
            message: "Resource not found"
            data: []
    BadRequestError:
      description: "Invalid input or validation error"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 400
            type: "VALIDATION_ERROR"
            message: "Validation has failed"
            data:
              - type: "VALIDATION_ERROR"
                field: "url"
                message: "URL must be a valid URL"
    ConflictError:
      description: "Unique constraint validation error"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 409
            type: "CONFLICT_ERROR"
            message: "A record with the same name exists"
            data: []
    InvalidCredentialsError:
      description: "Authentication has failed"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 401
            type: "AUTHENTICATION_REQUIRED"
            message: "Authentication is required"
            data: []
    NotAuthorizedError:
      description: "Method is not allowed or access has been denied"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 403
            type: "FORBIDDEN"
            message: "Access denied"
            data: []
    ResourceNotFoundError:
      description: "Resource not found error"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 404
            type: "NOT_FOUND"
            message: "Resource not found"
            data: []
    InternalError:
      description: "Unexpected Error"
      content:
        application/json:
          schema:
            $ref: "#/components/responses/ErrorResponse"
          example:
            code: 500
            type: "INTERNAL_SERVER_ERROR"
            message: "An unexpected error has occurred"
            data: []
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
